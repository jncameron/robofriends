{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","props","map","robot","components_Card","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfcf8f4c.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCHFIELD, \n  REQUEST_ROBOTS_PENDING, \n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED \n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCHFIELD:\n      return  { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return  Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return  Object.assign({},state, {robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n      return  Object.assign({}, state, {error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return(\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${name}?200*200`} alt=\"ROBOT\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n\n  return (\n    props.robots.map(function(robot) {\n      return (\n        <Card key={robot.id} \n        id={robot.id} \n        name={robot.name} \n        email={robot.email} />\n      )\n    })\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (props) => {\n\n  return (\n    <div className=\"pa2\">\n      <input \n        className=\"pa3 ba b--green bg-lightest-blue\" \n        type=\"search\" \n        placeholder=\"search robots\" \n        onChange={props.searchChange}  \n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n    {props.children}\n  </div>\n}\n\nexport default Scroll;\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField, requestRobots} from '../actions'\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    return isPending ?\n    <h1>Loading</h1> :\n    (\n      <div className=\"tc\">\n        <h1 className=\"f2\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCHFIELD, \n  REQUEST_ROBOTS_PENDING, \n  REQUEST_ROBOTS_SUCCESS, \n  REQUEST_ROBOTS_FAILED \n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport thunkMiddleWare from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport tachyons from 'tachyons';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = \n  createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}